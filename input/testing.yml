openapi: 3.0.3
info:
  title: E-commerce API
  description: A simple e-commerce API for managing products, orders, and customers
  version: 1.0.0
  contact:
    name: API Support
    email: support@ecommerce-api.com
    url: https://ecommerce-api.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.ecommerce.com/v1
    description: Production server
  - url: https://staging-api.ecommerce.com/v1
    description: Staging server

tags:
  - name: products
    description: Product management
  - name: orders
    description: Order management
  - name: customers
    description: Customer management

paths:
  /products:
    get:
      tags:
        - products
      summary: Get all products
      description: Retrieve a list of all products with optional filtering
      parameters:
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
            example: electronics
        - name: limit
          in: query
          description: Number of products to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of products to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                    example: 150
                  limit:
                    type: integer
                    example: 20
                  offset:
                    type: integer
                    example: 0
    post:
      tags:
        - products
      summary: Create a new product
      description: Add a new product to the catalog
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      tags:
        - products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            example: "12345"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - products
      summary: Update product
      description: Update an existing product
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            example: "12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      tags:
        - orders
      summary: Get all orders
      description: Retrieve a list of orders for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by order status
          required: false
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - orders
      summary: Create a new order
      description: Place a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /customers/profile:
    get:
      tags:
        - customers
      summary: Get customer profile
      description: Retrieve the authenticated customer's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          example: 199.99
        category:
          type: string
          example: "electronics"
        stock:
          type: integer
          example: 50
        images:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-20T14:45:00Z"

    ProductCreate:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          example: 199.99
        category:
          type: string
          example: "electronics"
        stock:
          type: integer
          example: 50
        images:
          type: array
          items:
            type: string
            format: uri

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Wireless Headphones Pro"
        description:
          type: string
          example: "Premium wireless headphones with advanced noise cancellation"
        price:
          type: number
          format: float
          example: 249.99
        stock:
          type: integer
          example: 30

    Order:
      type: object
      properties:
        id:
          type: string
          example: "order_67890"
        customerId:
          type: string
          example: "customer_123"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total:
          type: number
          format: float
          example: 399.98
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          example: "processing"
        shippingAddress:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    OrderCreate:
      type: object
      required:
        - items
        - shippingAddress
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - productId
              - quantity
            properties:
              productId:
                type: string
                example: "12345"
              quantity:
                type: integer
                minimum: 1
                example: 2
        shippingAddress:
          $ref: '#/components/schemas/Address'

    OrderItem:
      type: object
      properties:
        productId:
          type: string
          example: "12345"
        productName:
          type: string
          example: "Wireless Headphones"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 199.99
        subtotal:
          type: number
          format: float
          example: 399.98

    Customer:
      type: object
      properties:
        id:
          type: string
          example: "customer_123"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phone:
          type: string
          example: "+1-555-0123"
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T08:00:00Z"

    Address:
      type: object
      required:
        - street
        - city
        - postalCode
        - country
      properties:
        street:
          type: string
          example: "123 Main Street"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "USA"

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "The request contains invalid parameters"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "price"
              message:
                type: string
                example: "Price must be a positive number"